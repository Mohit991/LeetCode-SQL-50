
# We join the Queue table with itself, creating combinations of rows where each row is paired
# with all rows that have a higher or equal turn value.
# We group the rows by turn and calculate the sum of weights for each group.
# Using the HAVING clause, we filter out groups whose sum of weights exceeds 
# the weight limit of 1000.
# We order the results by the sum of weights in descending order, 
# ensuring the last person who can fit is at the top.
# Finally, we limit the result to 1 row since we only need the information of the last 
# person.

select q1.person_name from 
queue q1 inner join queue q2 on q1.turn >= q2.turn
group by q1.turn
having sum(q2.weight) <= 1000
order by sum(q2.weight) desc
limit 1

###############################################################

# (1) make running sum
# (2) find maximum turn where running sum <= 1000

WITH CummulativeSum AS (
    SELECT 
        turn, person_name,
        SUM(weight) OVER(ORDER BY turn ASC) AS total_weight_till_here 
    FROM Queue
    ORDER BY turn
)
SELECT person_name
FROM Queue q
WHERE q.turn = (SELECT MAX(turn) FROM CummulativeSum WHERE total_weight_till_here <= 1000);

